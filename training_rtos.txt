Training RTOS (Real Time Operating System) with ESP32S

FreeRTOS API : www.freertos.org/a00106.html

introduction: 
Blinky.ino
>   create 3 task utk blink led dgn delay berbeda-beda
>   perlu rangkai 3 led utk melihat task bekerja 
    scr preemptive
>   operator ^ utk XOR -> digunakan utk toggle
>   for(;;) -> sama dgn while(1)
>   ? maksud dari stack high water mark

task: 
Task1.ino 
>   create 2 task : serial print * + serial print char dlam list
>   ubah baud rate jadi 300 agar serial print lebih lambat
>   task dapat disuspend dan resume tergantung kebutuhan
>   setelah task di delete, maka task tidak akan dieksekusi
    lagi
>   ? perbedaan eksekusi task dgn prioritas yg berbeda

Task2.ino 
>   create 2 task : blink led + readserial delay utk blink led
>   menggunakan global variabel utk sync variabel delay antar 2 task
>   led built in utk ESP-WROOM-32 [board WEMOS-LOLIN-32] ada di gpio 2
>   task default [setup() + loop()] dihabus dgn vTaskDelete(NULL)
    setelah setup() selesai


Memory1.ino 
>   ? pvPortMalloc sudah penuh, cara vPortFree() utk free heap memory

Memory2.ino 
>   terlihat free heap berkurang saat pointer message mendapat characters
>   fungsi vPortFree utk free heap 
>   menggunakan global var utk synchron antar task (flag msg_flag)
>   ? configASSERT 
>   ? alokasi memori menggunakan pvPortMalloc

Queue1.ino 
>   task default: send queue tiap 1 detik
>   task 1: serial print receive queue tiap 500ms
>   QueueHandle utk sync data berupa antrian antar task

Queue2.ino 
>   define LED_BUILTIN 12
>   create 2 task: 
    task CLI: receive queue msg,
        read Serial ,
        print Serial,
        send queue delay,

    blink LED: receive queue msg, 
        send queue msg.count,
        blink LED default 500ms, 
        send queue jika counter mencapai 100

Queue3.ino 
>   Queue1 + display (modif pakai lcd16x2 - LiquidCrystal.h)
>   cek jika send queue lebih cepat dibanding receive queue:
    saat queue belum receive tapi sudah send queue lagi, maka send queue
    gagal karna queue penuh (serial print akan bergantian angka
    dan queue full)

mvc.ino 
>   create 3 task:
    Model (process) : receive queue, mengolah data temp (membagi 3 kondisi temp),send queue ke task display 
    Visual (display/output) : receive queue, berupa blink led dgn 3 variasi delay dgn masing2 kondisi temp 
    Controller (input) : ambil data dari serial read, send queue ke task process

timer1.ino
>   create 2 timer software menggunakan 1 fungsi callback (dibedakan berdasarkan timer id)
>   saat create dapat memilih utk auto reload atau tidak
>   setelah timer dicreate, timer perlu di start

timer 2.ino
>   create 1 task: read serial , jika serial available , echo serial, start timer dan nyalakan led 
>   create 1 timer: matikan LED 

binary.ino 
>   binary semaphore sprti token, utk mendapat akses resource perlu mengambil token tsb
>   create blink task: give token dan eksekusi blink 
>   task setup: sequantial -> tunggu read serial available, create semaphore, create blink task,
    kemudian semaphore take (blocking hingga mendapat binary semaphore)
>   ? task loop: maksudnya allow yielding

counting.ino 
>   masuk ke task all done di tengah2 karna setelah task ke 5 selesai give semaphore,
    bloking take semaphore di task default selesai dan eksekusi print task all done
>   ketika diganti dgn semaphore binary, setelah create beberapa task, kemudian lgsg 
    give beberapa semaphore shg binary semaphore habis (karna harus satu)

mailbox.ino 
>   create queue yg ingin dipakai bersama
>   terdpat 2 task :
    update: menggunakan queue overwrite utk menulis data ke mailbox 
    read: menggunakan queue peek utk membaca data dari mailbox
>   ? kenapa pola saat print Data Read 6x kemudian stlh written Data Read 4x

priority1.ino 
>   set loopTask dgn priority 3, kemudian create task1 dgn priority 2 (lebih rendah dari priority loopTask)
    terlihat serial print Task1 created tereksekusi terlebih dahulu sblm Tas1 executing 
>   task1 dgn priority 3, kemudian create task2 dgn priority 4 (lebih tinggi dari priority task1)
    terlihat serial print Task2 executing terlebih dahulu sblm Task2 created 
>   ? handle task 2 dibuat nullptr karna task 1 dan taskloop sudah didelete, shg nullptr blm dipakai task manapun

priority2.ino 
>   loopTask priority 1 , create task1 dgn priority 0, kemudian task1 disuspend
    setpriority task1 jadi 3, skrg posisi priority task1 lebih tinggi dari looptask,
    tapi karna task1 suspend jadi tidak eksekusi apa2,
    setelah selesai 3 detik delay, task1 resume, maka task1 mulai executing

prioritydemo.ino 
>   tidak bisa dicoba karna tidak ada lcd SSD1306
>   xTaskGetCurrentTaskHandle() utk ambil nilai task handle suatu task 
>   ada 4 task:
    looptask -> priority 10
    worm1 -> 9
    worm2 -> 8
    worm3 -> 7
>   task worm1,worm2,worm3 : send queue to back ,
    task loop : receive queue, draw worm 
>   ? pengecekan queue receive selalu pakai nilai pdPASS

demomutex.ino 
>   handle sama dgn semaphore, utk create pakai xSemaphoreCreateMutex
>   ketika task 1 jalan, mengambil mutex sperti mengunci di task1 
    karna task2 tidak bisa menggunakan resource karna mutex sedang diambil oleh task 1
    ketika task1 didelay setelah memberikan mutex , 
    task2 bisa mengambil mutex dan resource akan dieksekusi task2 
    , setelah delay task1 tidak bisa mengmbil resource karna mutex sudah diambil oleh task2 

racecondition.ino 
>   demomutex.ino tanpa penggunaan mutex 
>   global variabel nilai increment antara task1 dan task2 tidak cocok
    karna dipakai scr bersamaan tanpa adanya sinkronisasi
>   saat task1 sudah mengcounting shared_var hingga 100,
    task2 baru mengcounting hingga 96, padahal sama2 menggunakan shared_var yg sama 
    karna ada delay random antara 100~500. menunjukkan bahwa shared_var yg digunakan bersama,
    bisa tidak synchron karna delay/lamanya suatu task mengeksekusi
>   jika delay dibuat seragam, counting bernilai sama antara task1 dan 2
    tapi bisa bergantian antara task1 atau task2 dahulu yg dieksekusi 
>   cek jika task1 di delay 5 detik kemudian counting berjalan kembali,
    nilai diambil dari share_var yg sdh tercounting dari task2

taskparam.ino 
>   ? pada task loop take mutex, pada task blink give mutex, mutex bisa give dan take antar task 
>   pada task loop, terjadi blocking ketika mutex sdh diambil oleh take mutex sblm create task
    kemudian give mutex di dalam fungsi task blink

timerint.ino 
>   pada looptask, setup timer utk interrupt
    menggunakan timer divider, timer max count 1MHz 
    setting autoreload utk trigger berulang
>   timer interrupt akan dieksekusi tiap selang waktu
>   ? hitungan timer , div 80, count 1000000 (berdasarkan datasheet, internal osilator 8MHz)

criticalsection.ino 
>   using spinlock at timer int 
>   1 task dan 1 timer int 
>   task printValues print counter dan decrement, selama delay
    masuk timer int, increment counter 
>   ? jika tidak pakai spinlock, reboot2 terus

audio.ino 
>   2 task:
    task calc_rms: melakukan perhitungan tegangan rms 
    task do_cli: utk read serial dan menampilkan hasil dari calc_rms
>   input A0 menggunakan potensio, read serial dibaca di timer int, dan notify task give ke handler processing task (task cal_rms) 
>   jika serial read "rms" maka akan serial print tegangan rata2 
>   keluaran akan terlihat pada led 
>   notifytask sama dgn binary semaphore tapi lebih cepat


sample.ino 
semaphore.ino 

queuesets1.ino 
>   create 3 task:
    processor => priority 2 lebih tinggi dari task lain
        queue set member handle utk mengambil queue yg sdh siap
        blocking menunggu semaphore dari task producer_1Hz_sem
        blocking menunggu queue dari task producer_data 
    producer_1Hz_sem => priority 1 sama dgn task producer_data 
        delay kemudian give semaphore 
    producer_data => priority 1
        increment data, kirim data ke queue, delay 
>   eksperimen: tidak pakai queuesets member, blocking di task processor karna hanya menunggu semahore/queue 
    dicoba priority diganti sama semua, berjalan dgn baik sama seperti dgn queuesets1 
>   queue sets menghandle queue dari task lain (termasuk yg lebih rendah prioritynya)

tasknotify1.ino 
>   mirip dgn semaphore binary, bedanya tasknotify dgn semaphore binary 
>   rv = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
>   xTaskNotifyGive(htask1);

tasknotify2.ino 
>   3task:
    looptask => create 2 task, delay, give notify 
    task1 => take notify (blocking), toggle led 
    task2 => delay, give notify 
>   ? serial print tdk keluar di task 2 , --> karna tidak ada serial begin
    gunakan printf 
>   saat delay looptask dan task2 sama, hanya salah 1 yg bisa di take 

tasknotify3.ino 
>   mirip dgn tasknotify2 
>   ulTaskNotifyTake(pdFALSE, portMAX_DELAY); xClearCountOnExit false 
>   int app_cpu = 0;
>   ? toggle led terganggu task 2

tasknotify4.ino 
tasknotify5.ino 

evengrp.ino
>   3 task + 1 timer int:
    looptask => initialize gpio pin, delay, create group event
        create task1 dan task2, begin timer int, every delay 2000ms 
	-> set event group bit TASK1
    timer int => set event group bits from isr bit TASK3, check
	task_woken
    task1 => event groupwaits every task notify, toggle led
    task2 => every delay 3000ms -> set bit TASK2
>   menunggu sampai tiap bit set
>   ? cek jika hanya salah satu bit yg di set, apakah blocking atau tidak

ESP32 termasuk SMP (Symmetric Multicore)
spinlock -> mutex, menghentikan setiap interrupt, dibuat sependek mungkin
	, umum dipakai di SMP, cpu cek spinlock agar resource yg digunakan 
	dipastikan hanya beroperasi di dalam spinlock, mutex utk multicore

multicore_semaphore
>	create binary semaphore
>	create 2 task:
	task0 => pin to cpu0 (pro_cpu), configure pin gpio, give semaphore, delay 500ms
	task1 => pin to cpu1 (app_cpu), take semaphore (blocking until get the bin_sem), do toggle led
>	binary semaphore bisa digunakan antar task yg berbeda core
>	tiap core punya task idle, jika tidak ada task yg dijalankan akan masuk ke idle0 / idle1
>   coba task1 set priority lebih tinggi, tetap berjalan dgn baik 
    jika hal yg sama diuji di dgn core yg sama, akan selalu blocking di task1 

multicore 
>   jika hog delay terlalu lama, akan kena tash watchdog sehingga reboot
>   2 task dgn priority yg berbeda di core berbeda, melakukan serial print,
    hasil akan serial print bersamaan/bergantian
>   ? tskNO_AFFINITY, taskL akan masuk ke core 0, taskH masuk ke core1

streambuffer.ino
messagebuffer.ino
ringbuffer.ino


* Update board espressif ke 2.0.0
-> https://github.com/espressif/arduino-esp32/releases/download/2.0.0/package_esp32_index.json

